import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import styles from "./BookingPage.module.css";

const BookingPage = () => {
    const location = useLocation();
    const [formData, setFormData] = useState({
        sessionType: "",
        format: "",
        name: "",
        contact: "",
        therapyRequest: "",
    });
    const [statusMessage, setStatusMessage] = useState(null);
    const [statusType, setStatusType] = useState(""); // "success" –∏–ª–∏ "error"

    const sendMessageToTelegram = async (message) => {
        const BOT_TOKEN = "7720061220:AAELg2OiCYYaiRjciv3byBU9PlsbQhNreVw";
        const CHAT_ID = "1775514253";
        const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

        try {
            console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");

            const response = await fetch(TELEGRAM_API_URL, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: "HTML",
                }),
            });

            const responseData = await response.json();
            console.log("üì© –û—Ç–≤–µ—Ç Telegram API:", responseData);

            if (!response.ok || !responseData.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${responseData.description}`);
            }

            console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
            return true;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.message);
            return false;
        }
    };

    useEffect(() => {
        if (location.state) {
            setFormData((prevData) => ({
                ...prevData,
                sessionType: location.state.sessionType || "",
                format: location.state.format || "",
            }));
        }
    }, [location.state]);

    const validateForm = () => {
        const { sessionType, format, name, contact } = formData;

        if (!sessionType) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏.");
            setStatusType("error");
            return false;
        }

        if (!format) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.");
            setStatusType("error");
            return false;
        }

        if (!name.trim()) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");
            setStatusType("error");
            return false;
        }

        if (!contact.trim()) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.");
            setStatusType("error");
            return false;
        }

        if (!/^[\d\s+()-]+$/.test(contact)) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
            setStatusType("error");
            return false;
        }

        return true;
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
        setStatusMessage("");
        setStatusType("");
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateForm()) return;

        const { sessionType, format, name, contact, therapyRequest } = formData;

        const message = `
üìå <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>
- üìù <b>–§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏:</b> ${sessionType || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
- üõãÔ∏è <b>–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:</b> ${format || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
- üôã <b>–ò–º—è:</b> ${name}
- üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}
- üìù <b>–ó–∞–ø—Ä–æ—Å:</b> ${therapyRequest || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
        `;

        setStatusMessage("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...");
        setStatusType("loading");

        const success = await sendMessageToTelegram(message);

        if (success) {
            setStatusMessage("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
            setStatusType("success");
            setFormData({
                sessionType: "",
                format: "",
                name: "",
                contact: "",
                therapyRequest: "",
            });
        } else {
            setStatusMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            setStatusType("error");
        }
    };

    return (
        <div className={styles.bookingPage}>
            <div className={styles.card}>
                <h1 className={styles.title}>–ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Å—Å–∏—é</h1>

                {statusMessage && (
                    <div className={`${styles.statusMessage} ${styles[statusType]}`}>
                        <p>{statusMessage}</p>
                    </div>
                )}

                <form className={styles.form} onSubmit={handleSubmit}>
                    <label className={styles.label}>
                        –§–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏
                        <select
                            name="sessionType"
                            value={formData.sessionType}
                            onChange={handleChange}
                            className={styles.input}
                        >
                            <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏</option>
                            <option value="online">–û–Ω–ª–∞–π–Ω</option>
                            <option value="offline">–û—á–Ω–æ</option>
                        </select>
                    </label>

                    <label className={styles.label}>
                        –¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                        <select
                            name="format"
                            value={formData.format}
                            onChange={handleChange}
                            className={styles.input}
                        >
                            <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</option>
                            <option value="individual">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è</option>
                            <option value="couple">–ü–∞—Ä–Ω–∞—è</option>
                            <option value="group">–ì—Ä—É–ø–ø–æ–≤–∞—è</option>
                        </select>
                    </label>

                    <label className={styles.label}>
                        –í–∞—à–µ –∏–º—è
                        <input
                            type="text"
                            name="name"
                            value={formData.name}
                            onChange={handleChange}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                            className={styles.input}
                        />
                    </label>

                    <label className={styles.label}>
                        –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                        <input
                            type="text"
                            name="contact"
                            value={formData.contact}
                            onChange={handleChange}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
                            className={styles.input}
                        />
                    </label>

                    <label className={styles.label}>
                        –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Ä–∞–ø–∏—é
                        <textarea
                            name="therapyRequest"
                            value={formData.therapyRequest}
                            onChange={handleChange}
                            placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Ä–∞–ø–∏—é"
                            className={styles.textarea}
                        ></textarea>
                    </label>

                    <button type="submit" className={styles.button}>
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                    </button>
                </form>
            </div>
        </div>
    );
};

export default BookingPage;
