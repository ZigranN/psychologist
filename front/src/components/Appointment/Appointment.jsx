import { useState } from "react";
import styles from "./Appointment.module.css";

const Appointment = () => {
    const [formData, setFormData] = useState({
        name: "",
        contact: "",
    });
    const [isModalOpen, setModalOpen] = useState(false);

    const [statusMessage, setStatusMessage] = useState(null);
    const [statusType, setStatusType] = useState(""); // "success" –∏–ª–∏ "error"
    const handleModalToggle = () => {
        setModalOpen(!isModalOpen);
    };
    const sendMessageToTelegram = async (message) => {
        const BOT_TOKEN = '7720061220:AAELg2OiCYYaiRjciv3byBU9PlsbQhNreVw';
        const CHAT_ID = '1775514253';
        const TELEGRAM_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

        try {
            console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");

            const response = await fetch(TELEGRAM_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: 'HTML',
                }),
            });

            const responseData = await response.json();
            console.log("üì© –û—Ç–≤–µ—Ç Telegram API:", responseData);

            if (!response.ok || !responseData.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${responseData.description}`);
            }

            console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
            return true;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error.message);
            return false;
        }
    };

    const validateForm = () => {
        const { name, contact } = formData;

        if (!name.trim()) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");
            setStatusType("error");
            return false;
        }

        if (!contact.trim()) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.");
            setStatusType("error");
            return false;
        }

        if (!/^[\d\s+()-]+$/.test(contact)) {
            setStatusMessage("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
            setStatusType("error");
            return false;
        }

        return true;
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData((prevData) => ({
            ...prevData,
            [name]: value,
        }));
        setStatusMessage("");
        setStatusType("");
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateForm()) return;

        const { name, contact } = formData;

        const message = `
üìå <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—É—é –≤—Å—Ç—Ä–µ—á—É:</b>
- üôã <b>–ò–º—è:</b> ${name}
- üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}
- ‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 30 –º–∏–Ω—É—Ç
- üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 1500 —Å–æ–º
        `;

        setStatusMessage("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...");
        setStatusType("loading");

        const success = await sendMessageToTelegram(message);

        if (success) {
            setStatusMessage("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
            setStatusType("success");
            setFormData({ name: "", contact: "" });
        } else {
            setStatusMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            setStatusType("error");
        }
    };

    return (
        <section className={styles.appointment}>
            <div className={styles.container}>

                {isModalOpen && (
                    <div className={styles.modal}>
                        <div className={styles.modalContent}>
                            <button className={styles.closeButton} onClick={handleModalToggle}>
                                &times;
                            </button>
                            <h2>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</h2>
                            <ul>
                                <li>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏/ 60 –º–∏–Ω—É—Ç</li>
                                <li>–ü—Ä–∏ –æ–ø–æ–∑–¥–∞–Ω–∏–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–ª–∏–µ–Ω—Ç–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è.</li>
                                <li>–í —Å–ª—É—á–∞–µ –æ–ø–æ–∑–¥–∞–Ω–∏—è —Å –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã, –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è, –ª–∏–±–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ
                                    –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.
                                </li>
                                <li>–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç–µ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ —Å—É—Ç–∫–∏ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                                    –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
                                </li>
                                <li>–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ - –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è;
                                </li>
                                <li>–í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã –≤—Å—Ç—Ä–µ—á–∏ —Å –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã, –ª–∏–±–æ —è
                                    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–∫–∏–¥–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
                                </li>
                            </ul>
                        </div>
                    </div>
                )}
                <div>

                </div>
                <div className={styles.image}>
                    <img src="/images/4.jpg" alt="–°–∞–ª—Ç–∞–Ω–∞—Ç"/>
                </div>

                <div className={styles.form}>
                    <p className={styles.therapyTrigger} onClick={handleModalToggle}>
                        –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
                    </p>
                    <h2 className={styles.title}>–ó–ê–ü–ò–®–ò–¢–ï–°–¨ –ù–ê –û–ó–ù–ê–ö–û–ú–ò–¢–ï–õ–¨–ù–£–Æ –í–°–¢–†–ï–ß–£</h2>
                    <p>–ì–¥–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–π –ø–æ–¥—Ö–æ–¥</p>
                    <p className={styles.description}>
                        –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 30 –º–∏–Ω—É—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å 1500 —Å–æ–º
                    </p>

                    {statusMessage && (
                        <div className={`${styles.statusMessage} ${styles[statusType]}`}>
                            <p>{statusMessage}</p>
                        </div>
                    )}

                    <form onSubmit={handleSubmit}>
                        <input
                            type="text"
                            name="name"
                            placeholder="–í–∞—à–µ –∏–º—è"
                            className={styles.input}
                            value={formData.name}
                            onChange={handleChange}
                        />
                        <input
                            type="tel"
                            name="contact"
                            placeholder="(+996) 555 922289"
                            className={styles.input}
                            value={formData.contact}
                            onChange={handleChange}
                        />
                        <button type="submit" className={styles.button}>
                            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                        </button>
                    </form>
                </div>
            </div>
        </section>
    );
};

export default Appointment;
